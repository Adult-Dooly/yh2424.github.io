##############################################
# Script file: dipole_position_analysis.lsf
#
# Description:
#    This script characterizes the micro-LED
#    structure defined in the file 
#    micro_LED_cylindrical.fsp. It will 
#    calculate and plot:
#        - Power density vs theta at 625nm
#        - Power density vs theta integrated
#          over a Gaussian spectrum (10nm wide,
#          centered on 625nm
#        - Total power emitted to air in a 34.4 
#          degree cone
#
# Note: these results are obtained from a sweep
#       over the dipole position and orientation.
#       The script will run the swepp if it
#       doesn't contain any results.
#
# Copyright 2020, Ansys Inc.
##############################################

# Run the sweep if there are no results
if (havesweepresult != 1) {
    runsweep;
    save;
}

##############################################
# get the results for power vs theta
P = getsweepresult("position","P");
P_vs_theta = P.P;

##############################################
#take mean of 2 or 3 dipole positions
P_vs_theta = P_vs_theta(:,:,[1,2],:); # keep only x and y dipoles
P_vs_theta = sum(P_vs_theta,3)/size(P_vs_theta,3); # average over dipole orientations

##############################################
# calculate weighting functions for each dipole position
pos = P.dipole_position;
# uncomment lines below to test dowsampling positions
#pp = 1:2:11; # every second position
#pp = 1:5:11; # every 5th position
#pos = pos(pp);
#P_vs_theta = P_vs_theta(:,:,pp);

# assume linear weight of dipoles per unit area
pos_mid = (pos(2:end)+pos(1:end-1))/2;
weight = matrix(length(pos));
weight(1) = pi*pos_mid(1)^2;
weight(end) = pi*pos(end)^2-pi*pos_mid(end)^2;
weight(2:end-1) = pi*pos_mid(2:end)^2-pi*pos_mid(1:end-1)^2;
weight = weight/ (pi*pos(end)^2);

# sum dipoles multiplied by weights
P_vs_theta = real(sum( P_vs_theta*meshgrid3dz(P.theta_degrees,P.f,weight), 3));

# consider a given dipole spectrum for plotting power vs theta
lambda = P.lambda;
spectrum = exp(-(lambda-625e-9)^2/(10e-9)^2);

plot(lambda*1e9, spectrum, "lambda (nm)", "", "Dipole spectrum", "linewidth=3");
setplot("show legend", false);

plot(P.theta_degrees,P_vs_theta(:,find(P.lambda,625e-9)),
                     integrate(P_vs_theta*meshgridy(P.theta_degrees,spectrum),2,lambda)/integrate(spectrum,1,lambda),
                     "theta (degrees)","Power density near 625nm","","linewidth=3");
legend("single wavelength","spectrally integrated");

# integrate over theta up to 34.4 degrees to see what can emit to air
Theta = meshgridx(P.theta_radians,P.f);
T34 = 0.5*2*pi*real(integrate(P_vs_theta*sin(Theta)*(Theta<=34.4*pi/180),1,P.theta_radians));
plot(P.lambda*1e9,T34,"wavelength (nm)","Normalized power","Emitted to air","linewidth=3");
setplot("show legend",false);
    
