##############################################
# Script file: plot_single_dipole_results.lsf
#
# Description:
#    This script extracts the results from a
#    single dipole position and orientation. 
#    It will plot:
#        - Field intensity in XZ plane
#        - Field intensity in XY plane
#        - Total normalized power flowing out
#          of the monitor box
#        - Normalized Poynting vector in far
#          field
#        - Average value of Poynting vector
#          over all azymuthal angles
#
# Copyright 2020, Ansys Inc.
##############################################


##############################################
# Plot results from single simulation

## Scaling factors for plots
um = 1e6;
nm = 1e9;

##############################################
# Get field from y-normal monitor
x = getdata("y-normal", "x");
z = getdata("y-normal", "z");
E2 = getelectric("y-normal");
image(x*um, z*um, pinch(E2, 4, 1), "x (um)", "z (um)", "", "logplot");

##############################################
# Get field from z-normal monitor (farfield::z2)
x = getdata("farfield::z2", "x");
y = getdata("farfield::z2", "y");
E2 = getelectric("farfield::z2");
image(x*um, y*um, pinch(E2, 4, 1), "x (um)", "y (um)", "");

##############################################
# Get results from "farfield" analysis group
## Total transmission
T = getresult("farfield", "T");
plot(T.lambda*nm, T.T, "lambda (nm)", "", "Total transmission", "linewidth=3");
setplot("show legend", false);

## Poynting vector in far field
S = getresult("farfield", "farfield");
visualize(S);

## P_vs_theta
P_vs_theta = getresult("farfield", "P_vs_theta");
plot(P_vs_theta.theta_degrees, pinch(P_vs_theta.P, 2, 1), "theta (degrees)", "", "P_vs_theta", "linewidth=3");
setplot("show legend", false);

## Purcell factor
Purcell = getresult("farfield", "Purcell");
plot(Purcell.lambda*nm, Purcell.purcell, "lambda (nm)", "", "Purcell factor", "linewidth=3");
setplot("show legend", false);

## Power in angular cone
# create 2D mesh of theta
Theta = meshgridx(P_vs_theta.theta_radians,P_vs_theta.f);
cone_angle = 34.4; #degrees
# integrate over specified cone
T34 = 0.5*2*pi*real(integrate(P_vs_theta.P*sin(Theta)*(Theta<=34.4*pi/180),1,P_vs_theta.theta_radians));

# plot final results
plot(P_vs_theta.lambda*nm,T34,T34/Purcell.purcell,"wavelength (nm)","Normalized power","Emitted to air","linewidth=3");
legend("Normalized power","Optical extraction efficiency");